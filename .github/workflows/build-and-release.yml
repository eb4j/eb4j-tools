name: check, build native image, and release

on: push

jobs:
  check:
    name: run gradle check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
      - uses: eskatos/gradle-command-action@v1
        name: gradle build
        with:
          arguments: check

  build:
    name: Build native image
    needs: [check]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gu-binary: [gu, gu.cmd]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1.10.0
      if: startswith(matrix.os, 'windows')
    - uses: microsoft/setup-msbuild@v1
      if: startswith(matrix.os, 'windows')
    - name: Setup Graalvm
      id: setup-graalvm
      uses: DeLaGuardo/setup-graalvm@master
      with:
        graalvm: '21.2.0'
        java: 'java11'
        arch: 'amd64'
    - name: Install native-image component
      run: |
        ${{ matrix.gu-binary }} install native-image
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
    - uses: burrunan/gradle-cache-action@v1
      name: Run gradle nativeImage
      with:
        gradle-version: 6.9
        arguments: zipExecutable
    - name: Upload java dist asset
      uses: actions/upload-artifact@v2
      with:
        name: release-files
        path: build/distributions/

  release:
    name: publish on github release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release-files
        path: distributions

    - name: Create release
      uses: "marvinpinto/action-automatic-releases@latest"
      id: create_release
      with:
        title: Release v${{ steps.get_version.outputs.VERSION }}
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        draft: false
        prerelease: false
        files: |
          distributions/*.zip