name: Upload Assets to github release

on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gu-binary: [gu, gu.cmd]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
    name: Upload Release Asset
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1.9.0
      if: startswith(matrix.os, 'windows')
    - uses: microsoft/setup-msbuild@v1
      if: startswith(matrix.os, 'windows')
    - name: Setup Graalvm
      id: setup-graalvm
      uses: DeLaGuardo/setup-graalvm@master
      with:
        graalvm: '21.2.0'
        java: 'java11'
        arch: 'amd64'
    - name: Install native-image component
      run: |
        ${{ matrix.gu-binary }} install native-image
    - name: Get the version
      id: get_version
      run: |
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
    - uses: burrunan/gradle-cache-action@v1
      name: Run gradle nativeImage
      with:
        gradle-version: 6.9
        arguments: zipExecutable
    - name: Upload java dist asset
      uses: actions/upload-artifact@v2
      with:
        name: release-files
        path: build/distributions/

  release:
    name: publish on github release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get the version
      id: get_version
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
        echo ::set-output name=OS_ARCH::Linux-x86_64
        fi
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
        echo ::set-output name=OS_ARCH::Macos-x86_64
        fi
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
        echo ::set-output name=OS_ARCH::Windows-x86_64
        fi
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release-files
        path: distributions
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset(tools,zip)
      id: upload-release-tools-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: distributions/eb-${{ steps.get_version.outputs.OS_ARCH }}-${{ steps.get_version.outputs.VERSION }}.zip
        asset_name: eb-${{ steps.get_version.outputs.OS_ARCH }}-${{ steps.get_version.outputs.VERSION }}.zip
        asset_content_type: application/zip
